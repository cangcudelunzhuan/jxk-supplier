'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _common = require('./common');

var _common2 = _interopRequireDefault(_common);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * @param {String} dbName 数据库名称
 * @param {String | Array} createTable 数据库里面的表名称
 * @param {Number} version 数据库版本号
 */
function database(dbName, createTable) {
  var version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  var G = window || globalThis || global;
  var ODB = G.indexedDB || G.webkitIndexedDB || G.mozIndexedDB || G.msIndexedDB;
  if (!ODB) {
    console.error('您的浏览器设备不支持indexDB,请更换或升级浏览器');
    return false;
  }

  if (_common2.default.isType(createTable, 'undefined')) {
    createTable = dbName;
  }

  this.IDB = null;
  var readType = 'readwrite';

  var getStore = function getStore(IDB, tableName) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'readonly';

    var transaction = IDB.transaction(tableName, type);
    return transaction.objectStore(tableName);
  };

  var lotdeal = function lotdeal(data, store, fn) {
    if (_common2.default.isType(data, 'object')) {
      data = [data];
    }
    if (_common2.default.isType(data, 'array')) {
      data.forEach(function (idata) {
        fn.call(store, idata);
      });
    }
  };

  this.connction = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.dbConnect = null;
      _this.dbConnect = ODB.open(dbName, version);

      /**
       * 数据库初始或版本号升级回调
       */
      _this.dbConnect.onupgradeneeded = function (e) {
        // keyGenerator, keyPath, autoIncrement
        _this.IDB = e.target.result;
        if (_common2.default.isType(createTable, 'string')) {
          createTable = [createTable];
        }
        createTable.forEach(function (item) {
          if (!_this.IDB.objectStoreNames.contains(item)) {
            _this.IDB.createObjectStore(item.tableName || item, item.conf || { autoIncrement: true });
          }
        });
      };

      _this.dbConnect.onsuccess = function (e) {
        _this.IDB = e.target.result;
        resolve(_this.IDB);
      };

      _this.dbConnect.onerror = function (e) {
        console.warn('数据库连接失败');
        reject(e.currentTarget.error.message);
      };
    });
  };

  this.insert = function (tableName, data) {
    var store = getStore(this.IDB, tableName, readType);
    lotdeal(data, store, store.add);
    return this.IDB;
  };

  this.select = function (tableName, column) {
    var _this2 = this;

    var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
      return null;
    };

    return new Promise(function (resolve, reject) {
      var store = getStore(_this2.IDB, tableName);
      var query = column === '*' ? store.getAll() : store.get(column);
      query.onsuccess = function (e) {
        cb(e.target.result, this.IDB);
        resolve(e.target.result);
      };
      query.onerror = function (e) {
        reject(e.currentTarget.error.message || '数据查询失败');
      };
    });
  };

  this.update = function (tableName, data) {
    var store = getStore(this.IDB, tableName, readType);
    lotdeal(data, store, store.put);
    return this.IDB;
  };

  this.delete = function (tableName, column) {
    var store = getStore(this.IDB, tableName, readType);
    lotdeal(column, store, store.delete);
    return this.IDB;
  };

  this.truncate = function (tableName) {
    var store = getStore(this.IDB, tableName, readType);
    store.clear();
  };

  this.dropTable = function (tableName) {
    if (this.IDB.objectStoreNames.contains(tableName)) {
      this.IDB.deleteObjectStore(tableName);
    }
  };

  this.dropDatabase = function (dbname) {
    ODB.deleteDatabase(dbname);
  };

  this.close = function () {
    this.IDB.close();
  };
} /**
   * indexDb
   */
exports.default = database;
module.exports = exports['default'];